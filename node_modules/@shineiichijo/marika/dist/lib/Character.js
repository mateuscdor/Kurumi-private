"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Character = void 0;
const axios_1 = __importDefault(require("axios"));
const Utils_1 = require("./Utils");
class Character {
    constructor() {
        this.util = new Utils_1.utils();
    }
    /**
     * Method for getting random Character with info
     * @returns {ICharacter}
     */
    getRandomCharacter() {
        return __awaiter(this, void 0, void 0, function* () {
            let url = this.util.getUrl("random");
            url += "/characters";
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data.data;
        });
    }
    /**
     * Method for getting the info of the given Character ID
     * @param {number} id the ID of the Character
     * @returns {ICharacter}
     */
    getCharacterById(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Character.");
            let url = this.util.getUrl("characters");
            url += `/${id}`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data.data;
        });
    }
    /**
     * Method for getting the Anime of the given Character ID
     * @param {number} id The ID of the Character
     * @returns {ICharacterAnime}
     */
    getCharacterAnime(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Character.");
            let url = this.util.getUrl("characters");
            url += `/${id}/anime`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for getting the Manga of the given Character ID
     * @param {number} id The ID of the Character
     * @returns {ICharacterManga}
     */
    getCharacterManga(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Character.");
            let url = this.util.getUrl("characters");
            url += `/${id}/manga`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for getting the Voice Actors of the given Character ID
     * @param {number} id The ID of the Character
     * @returns {ICharacterVoices}
     */
    getCharacterVoiceActors(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Character.");
            let url = this.util.getUrl("characters");
            url += `/${id}/voices`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for getting pictures of the given Character ID
     * @param {number} id The ID of the Character
     * @returns {ICharacterPictures}
     */
    getCharacterPictures(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Character.");
            let url = this.util.getUrl("characters");
            url += `/${id}/pictures`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for searching Character
     * @param {string} query The Character name that you wanna search
     * @param {ICharacterSearchOptions} options The options for searching
     * @returns {ICharacterSearch}
     */
    searchCharacter(query, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!query)
                throw new TypeError("Provide the query of the Character");
            const baseUrl = this.util.getUrl("characters");
            const url = this.util.getCharacterQuerySearchUrl(baseUrl, query, options);
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for getting top Characters in MyAnimeList
     * @param {ISimpleOption} page The page of the list
     * @returns {ITopCharacter}
     */
    getTopCharacters(options) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = this.util.getUrl("top");
            url += "/characters";
            if ((options === null || options === void 0 ? void 0 : options.query) === undefined) {
                url += "";
            }
            else {
                url += `?page=${options === null || options === void 0 ? void 0 : options.query}`;
            }
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
}
exports.Character = Character;
