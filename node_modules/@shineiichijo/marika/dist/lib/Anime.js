"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Anime = void 0;
const axios_1 = __importDefault(require("axios"));
const Utils_1 = require("./Utils");
class Anime {
    constructor() {
        this.util = new Utils_1.utils();
    }
    /**
     * Method for getting the info of the given Anime ID
     * @param {number} id The ID of the Anime
     * @returns {IAnime}
     */
    getAnimeById(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Anime.");
            let url = this.util.getUrl("anime");
            url += `/${id}`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data.data;
        });
    }
    /**
     * Method for getting the characters of the given Anime ID
     * @param {number} id The ID of the Anime
     * @returns {IAnimeCharacters}
     */
    getAnimeCharacters(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Anime.");
            let url = this.util.getUrl("anime");
            url += `/${id}/characters`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for getting the staffs of the given Anime ID
     * @param {number} id The ID of the Anime
     * @returns {IAnimeStaff}
     */
    getAnimeStaff(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Anime.");
            let url = this.util.getUrl("anime");
            url += `/${id}/staff`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for getting the list of episodes of the given Anime ID
     * @param {number} id The ID of the Anime
     * @param {ISimpleOption} page The page of the list
     * @returns {IAnimeEpisodes}
     */
    getAnimeEpisodes(id, page) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Anime.");
            let url = this.util.getUrl("anime");
            url += `/${id}/episodes`;
            const i = page === null || page === void 0 ? void 0 : page.query;
            let q;
            if (!i) {
                q = 1;
            }
            else {
                q = i;
            }
            url += `?query=${q}`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for getting an episode of the given Anime ID
     * @param {number} id The ID of the Anime
     * @param {ISimpleOption} episode The episode of the Anime
     * @returns {IAnimeEpisodeById}
     */
    getAnimeEpisodeById(id, episode) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id || !episode.query)
                throw new TypeError("Make sure you have provided the required fields");
            let url = this.util.getUrl("anime");
            url += `/${id}/episodes/${episode.query}`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data.data;
        });
    }
    /**
     * Method for getting news of the given Anime ID
     * @param {number} id The ID of the Anime
     * @param {ISimpleOption} page The page of the news
     * @returns {IAnimeNews}
     */
    getAnimeNews(id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError(`Provide the id of the Anime`);
            let url = this.util.getUrl("anime");
            url += `/${id}/news`;
            const i = options === null || options === void 0 ? void 0 : options.query;
            let q;
            if (!i) {
                q = 1;
            }
            else {
                q = i;
            }
            url += `?page=${q}`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for getting forum of the given Anime ID
     * @param {number} id The ID of the Anime
     * @param {TAnimeFilter} filter The filter for search
     * @returns {IAnimeForum}
     */
    getAnimeForum(id, filter) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Anime");
            let url = this.util.getUrl("anime");
            url += `/${id}/forum`;
            if (!filter) {
                url += "";
            }
            else {
                url += `?filter=${filter}`;
            }
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for getting videos of the given Anime ID
     * @param {number} id The ID of the Anime
     * @returns {IAnimeVideos}
     */
    getAnimeVideos(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Anime.");
            let url = this.util.getUrl("anime");
            url += `/${id}/videos`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data.data;
        });
    }
    /**
     * Method for getting pictures of the given Anime ID
     * @param {number} id The ID of the Anime
     * @returns {IAnimePictures}
     */
    getAnimePictures(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Anime");
            let url = this.util.getUrl("anime");
            url += `/${id}/pictures`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for getting statistics of the given Anime ID
     * @param {number} id The ID of the Anime
     * @returns {IAnimeStats}
     */
    getAnimeStats(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Anime");
            let url = this.util.getUrl("anime");
            url += `/${id}/statistics`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data.data;
        });
    }
    /**
     * Method for getting more info of the given Anime ID
     * @param {number} id The ID of the Anime
     * @returns {IAnimeMoreInfo}
     */
    getAnimeMoreInfo(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Anime");
            let url = this.util.getUrl("anime");
            url += `/${id}/moreinfo`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data.data;
        });
    }
    /**
     * Method for getting recommendations of the given Anime ID
     * @param {number} id The ID of the Anime
     * @returns {IAnimeRecommendations}
     */
    getAnimeRecommendations(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Anime");
            let url = this.util.getUrl("anime");
            url += `/${id}/recommendations`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for getting user updates of the given Anime ID
     * @param {number} id The ID of the Anime
     * @param {ISimpleOption} page The page of the updates
     * @returns {IAnimeUserUpdates}
     */
    getAnimeUserUpdates(id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Anime");
            let url = this.util.getUrl("anime");
            url += `/${id}/userupdates`;
            const i = options === null || options === void 0 ? void 0 : options.query;
            let q;
            if (!i) {
                q = 1;
            }
            else {
                q = i;
            }
            url += `?page=${q}`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for getting reviews of the given Anime ID
     * @param {number} id The ID of the Anime
     * @param {ISimpleOption} page The page of the reviews
     * @returns {IAnimeReviews}
     */
    getAnimeReviews(id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Anime");
            let url = this.util.getUrl("anime");
            url += `/${id}/reviews`;
            const i = options === null || options === void 0 ? void 0 : options.query;
            let q;
            if (!i) {
                q = 1;
            }
            else {
                q = i;
            }
            url += `?page=${q}`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for getting relations of the given Anime ID
     * @param {number} id The ID of the Anime
     * @returns {IAnimeRelations}
     */
    getAnimeRelations(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Anime");
            let url = this.util.getUrl("anime");
            url += `/${id}/relations`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data.data;
        });
    }
    /**
     * Method for getting themes of the given Anime ID
     * @param {number} id The ID of the Anime
     * @returns {IAnimeThemes}
     */
    getAnimeThemes(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Anime");
            let url = this.util.getUrl("anime");
            url += `/${id}/themes`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data.data;
        });
    }
    /**
     * Method for getting externals of the given Anime ID
     * @param {number} id The ID of the Anime
     * @returns {IAnimeExternal}
     */
    getAnimeExternals(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Anime");
            let url = this.util.getUrl("anime");
            url += `/${id}/external`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for searching Anime
     * @param {string} query The Anime title that you wanna search
     * @param {IAnimeSearchOptions} options The options for searching
     * @returns {IAnimeSearch}
     */
    searchAnime(query, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!query)
                throw new TypeError("Provide the query of the Anime");
            const baseUrl = this.util.getUrl("anime");
            const url = this.util.getAnimeQuerySearchUrl(baseUrl, query, options);
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for getting top Anime list
     * @param {ISimpleOption} page The page of the list
     * @returns {ITopAnime}
     */
    getTopAnime(options) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = this.util.getUrl("top");
            url += "/anime";
            if ((options === null || options === void 0 ? void 0 : options.query) === undefined) {
                url += "";
            }
            else {
                url += `?page=${options === null || options === void 0 ? void 0 : options.query}`;
            }
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for getting random Anime with info
     * @returns {IAnime}
     */
    getRandomAnime() {
        return __awaiter(this, void 0, void 0, function* () {
            let url = this.util.getUrl("random");
            url += "/anime";
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data.data;
        });
    }
}
exports.Anime = Anime;
