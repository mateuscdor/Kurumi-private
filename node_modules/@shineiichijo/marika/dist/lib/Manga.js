"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Manga = void 0;
const axios_1 = __importDefault(require("axios"));
const Utils_1 = require("./Utils");
class Manga {
    constructor() {
        this.util = new Utils_1.utils();
    }
    /**
     * Method for getting random Manga with info
     *  @returns {IManga}
     */
    getRandomManga() {
        return __awaiter(this, void 0, void 0, function* () {
            let url = this.util.getUrl("random");
            url += "/manga";
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred.  ${error}`);
            }
            return data.data;
        });
    }
    /**
     * Method for getting the info of the given Manga ID
     * @param {number} id ID of the Manga
     * @returns {IManga}
     */
    getMangaById(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide ID of the Manga");
            let url = this.util.getUrl("manga");
            url += `/${id}`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred.  ${error}`);
            }
            return data.data;
        });
    }
    /**
     * Method for getting Manga characters
     * @param {number} id ID of the Manga
     * @returns {IMangaCharacters}
     */
    getMangaCharacters(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Manga");
            let url = this.util.getUrl("manga");
            url += `/${id}`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred.  ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for getting news of the given Manga ID
     * @param {number} id ID of the Manga
     * @param {ISimpleOption} page The page of the news
     * @returns {IMangaNews}
     */
    getMangaNews(id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError(`Provide the id of the Manga`);
            let url = this.util.getUrl("manga");
            url += `/${id}/news`;
            const i = options === null || options === void 0 ? void 0 : options.query;
            let q;
            if (!i) {
                q = 1;
            }
            else {
                q = i;
            }
            url += `?page=${q}`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for getting Manga topics
     * @param {number} id ID of the Manga
     * @returns {IMangaTopics}
     */
    getMangaTopics(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Manga");
            let url = this.util.getUrl("manga");
            url += `/${id}/forum`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for getting pictures of the given Manga ID
     * @param {number} id ID of the Manga
     * @returns {IMangaPictures}
     */
    getMangaPictures(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Manga");
            let url = this.util.getUrl("manga");
            url += `/${id}/pictures`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for getting the statistics of the given Manga ID
     * @param {number} id ID of the Manga
     * @returns {IMangaStats}
     */
    getMangaStats(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Manga");
            let url = this.util.getUrl("manga");
            url += `/${id}/statistics`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data.data;
        });
    }
    /**
     * Method for getting more info of the given Manga ID
     * @param {number} id ID of the Manga
     * @returns {IMangaMoreInfo}
     */
    getMangaMoreInfo(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Manga");
            let url = this.util.getUrl("manga");
            url += `/${id}/moreinfo`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data.data;
        });
    }
    /**
     * Method for getting recommendations of the given Manga ID
     * @param {number} id ID of the Manga
     * @returns {IMangaRecommendations}
     */
    getMangaRecommendations(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Manga");
            let url = this.util.getUrl("manga");
            url += `/${id}/recommendations`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for getting user updates of the given Manga ID
     * @param {number} id ID of the Manga
     * @param {ISimpleOption} page Page of the list
     * @returns {IMangaUserUpdates}
     */
    getMangaUserUpdates(id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError(`Provide the id of the Manga`);
            let url = this.util.getUrl("manga");
            url += `/${id}/userupdates`;
            const i = options === null || options === void 0 ? void 0 : options.query;
            let q;
            if (!i) {
                q = 1;
            }
            else {
                q = i;
            }
            url += `?page=${q}`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for getting reviews of the given Manga ID
     * @param {number} id ID of the Manga
     * @param {ISimpleOption} page Page of the list
     * @returns {IMangaReviews}
     */
    getMangaReviews(id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError(`Provide the id of the Manga`);
            let url = this.util.getUrl("manga");
            url += `/${id}/reviews`;
            const i = options === null || options === void 0 ? void 0 : options.query;
            let q;
            if (!i) {
                q = 1;
            }
            else {
                q = i;
            }
            url += `?page=${q}`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for getting relations of the given Manga ID
     * @param {number} id ID of the Manga
     * @returns {IMangaRelations}
     */
    getMangaRelations(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Manga");
            let url = this.util.getUrl("manga");
            url += `/${id}/relations`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for getting external of the given Manga ID
     * @param {number} id ID of the Manga
     * @returns {IMangaExternals}
     */
    getMangaExternal(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id)
                throw new TypeError("Provide the id of the Manga");
            let url = this.util.getUrl("manga");
            url += `/${id}/external`;
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for searching Manga
     * @param {string} Query of the Manga
     * @param {IMangaSearchOptions} options The options for searching
     * @returns {IMangaSearch}
     */
    searchManga(query, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!query)
                throw new TypeError("Provide the query of the Manga");
            const baseUrl = this.util.getUrl("manga");
            const url = this.util.getMangaQuerySearchUrl(baseUrl, query, options);
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
    /**
     * Method for getting the list of top Manga
     * @param {ISimpleOption} page Page of the list
     * @returns {ITopManga}
     */
    getTopManga(options) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = this.util.getUrl("top");
            url += "/manga";
            if ((options === null || options === void 0 ? void 0 : options.query) === undefined) {
                url += "";
            }
            else {
                url += `?page=${options === null || options === void 0 ? void 0 : options.query}`;
            }
            let data;
            try {
                data = yield (yield axios_1.default.get(url)).data;
            }
            catch (error) {
                throw new TypeError(`An error occurred. ${error}`);
            }
            return data;
        });
    }
}
exports.Manga = Manga;
